name: Android CI

on:
  push: { branches: ["**"] }
  pull_request: { branches: ["**"] }

concurrency:
  group: android-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test-screens:
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    env:
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
      ANDROID_HOME: /usr/local/lib/android/sdk
      JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8
      GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-Xmx3g -XX:+UseParallelGC" -Dorg.gradle.vfs.watch=false

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - uses: gradle/actions/setup-gradle@v3

      # -------- Detect project directory (holds settings.gradle / settings.gradle.kts)
      - name: Detect Gradle project dir
        id: pd
        shell: bash
        run: |
          set -euxo pipefail
          ROOT="$GITHUB_WORKSPACE"
          CANDIDATE="$ROOT"
          if [ ! -f "$ROOT/settings.gradle" ] && [ ! -f "$ROOT/settings.gradle.kts" ]; then
            # search max depth 2 to avoid monorepo surprises
            FOUND=$(find "$ROOT" -maxdepth 2 -type f \( -name "settings.gradle" -o -name "settings.gradle.kts" \) -printf "%h\n" | head -n1 || true)
            if [ -n "$FOUND" ]; then
              CANDIDATE="$FOUND"
            fi
          fi
          echo "PROJECT_DIR=$CANDIDATE" >> $GITHUB_ENV
          echo "Detected PROJECT_DIR=$CANDIDATE"

      # -------- Install Android SDK manually (no interactive prompts)
      - name: Install Android SDK (manual)
        shell: bash
        run: |
          set -euxo pipefail
          SDK="$ANDROID_SDK_ROOT"
          mkdir -p "$SDK"
          ZIP=/tmp/clt.zip
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-12266719_latest.zip -O "$ZIP"
          unzip -o -q "$ZIP" -d /usr/local/lib/android/
          mkdir -p "$SDK/cmdline-tools"
          rm -rf "$SDK/cmdline-tools/16.0" || true
          mv /usr/local/lib/android/cmdline-tools "$SDK/cmdline-tools/16.0"
          ln -sfn "$SDK/cmdline-tools/16.0" "$SDK/cmdline-tools/latest"
          yes | "$SDK/cmdline-tools/latest/bin/sdkmanager" --licenses >/dev/null
          "$SDK/cmdline-tools/latest/bin/sdkmanager" --install "platform-tools" "platforms;android-34" "build-tools;34.0.0"
          "$SDK/platform-tools/adb" version

      # -------- Write local.properties into the detected PROJECT_DIR
      - name: Write local.properties
        shell: bash
        run: |
          set -euxo pipefail
          echo "sdk.dir=$ANDROID_SDK_ROOT" > "$PROJECT_DIR/local.properties"
          cat "$PROJECT_DIR/local.properties"

      - name: Make gradlew executable
        working-directory: ${{ env.PROJECT_DIR }}
        run: chmod +x ./gradlew

      - name: Gradle warmup
        working-directory: ${{ env.PROJECT_DIR }}
        run: ./gradlew -q help

      - name: Assemble :app
        working-directory: ${{ env.PROJECT_DIR }}
        run: ./gradlew :app:assembleDebug --stacktrace --no-daemon --console=plain

      - name: Unit tests (verbose, non-fatal)
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          set +e
          ./gradlew :app:testDebugUnitTest --stacktrace --info --no-daemon --console=plain
          exit 0

      - name: Paparazzi record (verbose)
        working-directory: ${{ env.PROJECT_DIR }}
        run: ./gradlew :app:recordPaparazziDebug --stacktrace --info --no-daemon --console=plain

      - name: Upload unit test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-reports
          path: |
            ${{ env.PROJECT_DIR }}/**/build/reports/tests/testDebugUnitTest/**
            ${{ env.PROJECT_DIR }}/**/build/test-results/testDebugUnitTest/**

      - name: Upload Paparazzi screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ui-screenshots-paparazzi
          path: |
            ${{ env.PROJECT_DIR }}/**/out/paparazzi/**
            ${{ env.PROJECT_DIR }}/**/build/paparazzi/**
