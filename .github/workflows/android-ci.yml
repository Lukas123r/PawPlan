name: Android CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      # Will be set once we detect the gradle root
      GRADLEW_DIR: .
      ANDROID_HOME: /usr/local/lib/android/sdk
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
      # Speed up Gradle & make logs plain
      GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-Xmx2g -XX:+HeapDumpOnOutOfMemoryError" -Dkotlin.daemon.jvm.options="-Xmx1g"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Detect Gradle wrapper directory
        id: findroot
        shell: bash
        run: |
          if [ -f "gradlew" ]; then
            echo "GRADLEW_DIR=." >> $GITHUB_ENV
          else
            WRAP=$(git ls-files | grep -E '/gradlew$' | head -n1 || true)
            if [ -z "$WRAP" ]; then
              echo "Gradle wrapper not found"; exit 1
            fi
            DIR=$(dirname "$WRAP")
            echo "GRADLEW_DIR=$DIR" >> $GITHUB_ENV
          fi
          echo "Gradle at: $GRADLEW_DIR"

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/gradle-wrapper.properties') }}-${{ hashFiles('**/*.gradle*','**/gradle.properties','**/settings.gradle*') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # ---------- ANDROID SDK (manual, deterministic) ----------
      - name: Install Android SDK commandline-tools (latest 12.x)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$ANDROID_HOME"/cmdline-tools
          # Use a fixed, working revision to avoid preview regressions
          URL="https://dl.google.com/android/repository/commandlinetools-linux-12266719_latest.zip"
          curl -sSL "$URL" -o /tmp/cmdtools.zip
          unzip -o -q /tmp/cmdtools.zip -d /tmp/cmdtools
          # Place under cmdline-tools/16.0 so sdkmanager path is stable
          rm -rf "$ANDROID_HOME/cmdline-tools/16.0"
          mkdir -p "$ANDROID_HOME/cmdline-tools/16.0"
          mv /tmp/cmdtools/* "$ANDROID_HOME/cmdline-tools/16.0/"
          echo "$ANDROID_HOME/cmdline-tools/16.0/bin" >> $GITHUB_PATH

      - name: Accept SDK licenses non-interactively
        shell: bash
        run: yes | "$ANDROID_HOME/cmdline-tools/16.0/bin/sdkmanager" --licenses > /dev/null

      - name: Install required SDK packages
        shell: bash
        run: |
          set -euo pipefail
          PKGS=(
            "platform-tools"
            "platforms;android-34"
            "build-tools;34.0.0"
          )
          "$ANDROID_HOME/cmdline-tools/16.0/bin/sdkmanager" "${PKGS[@]}"
          "$ANDROID_HOME/platform-tools/adb" version

      - name: Write local.properties pointing to SDK
        working-directory: ${{ env.GRADLEW_DIR }}
        shell: bash
        run: |
          printf "sdk.dir=%s\n" "$ANDROID_HOME" > local.properties
          cat local.properties

      # ---------- BUILD & TEST ----------
      - name: Gradle help (smoke)
        working-directory: ${{ env.GRADLEW_DIR }}
        shell: bash
        run: ./gradlew -q help

      - name: Unit tests
        working-directory: ${{ env.GRADLEW_DIR }}
        shell: bash
        run: |
          set -e
          # Try :app: first, else fall back to global task
          if ./gradlew -q projects | grep -qE "Project ':[Aa]pp'"; then
            ./gradlew :app:testDebugUnitTest --stacktrace --info --console=plain
          else
            ./gradlew testDebugUnitTest --stacktrace --info --console=plain
          fi

      - name: Paparazzi record (if available)
        working-directory: ${{ env.GRADLEW_DIR }}
        shell: bash
        run: |
          set -e
          if ./gradlew tasks | grep -q "recordPaparazziDebug"; then
            ./gradlew recordPaparazziDebug --stacktrace --info --console=plain
          else
            echo "Paparazzi task not present; skipping."
          fi

      # ---------- ARTIFACTS ----------
      - name: Collect test reports
        if: always()
        shell: bash
        working-directory: ${{ env.GRADLEW_DIR }}
        run: |
          mkdir -p ci-artifacts
          find . -type d -path "*/build/reports/tests" -exec bash -c 'for d; do dest="ci-artifacts/$(echo "$d" | sed "s#^\./##;s#/#__#g")"; mkdir -p "$dest"; cp -r "$d"/* "$dest"/; done' bash {} +
          find . -type d -path "*/build/reports/paparazzi" -exec bash -c 'for d; do dest="ci-artifacts/$(echo "$d" | sed "s#^\./##;s#/#__#g")"; mkdir -p "$dest"; cp -r "$d"/* "$dest"/; done' bash {} +

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-reports
          path: ${{ env.GRADLEW_DIR }}/ci-artifacts
          if-no-files-found: warn
