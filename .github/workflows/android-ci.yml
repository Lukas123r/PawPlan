# Workflow to build and test the Android project in CI
name: Android CI

on:
  push:
    branches: [ "**" ]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    env:
      JAVA_TOOL_OPTIONS: -Xmx2g
      GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-Xmx2g -XX:MaxMetaspaceSize=512m -Dfile.encoding=UTF-8"
      # Will be exported after setup-android as well:
      ANDROID_SDK_ROOT: ${{ env.ANDROID_HOME }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3

      # Install Android SDK packages. IMPORTANT: use YAML block scalar (|) to keep line breaks.
      - name: Install Android SDK packages
        id: setup-android
        uses: android-actions/setup-android@v3
        with:
          accept-android-sdk-licenses: true
          log-accepted-android-sdk-licenses: true
          # Install both 33.0.2 (primary) and 34.0.0 (optional) plus platforms and tools.
          packages: |
            platform-tools
            platforms;android-33
            build-tools;33.0.2
            platforms;android-34
            build-tools;34.0.0

      # Some runners occasionally fail to fetch packages on the first try. Retry with sdkmanager directly.
      - name: Retry missing SDK packages (best-effort)
        if: failure()
        shell: bash
        run: |
          set -euxo pipefail
          export ANDROID_SDK_ROOT="${ANDROID_HOME:-/usr/local/lib/android/sdk}"
          yes | "${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager" --licenses || true
          yes | "${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager" --install \
            "platform-tools" "platforms;android-33" "build-tools;33.0.2" || true

      # Write local.properties so Gradle always finds the SDK
      - name: Write local.properties
        shell: bash
        run: |
          set -euo pipefail
          SDK_PATH="${ANDROID_HOME:-/usr/local/lib/android/sdk}"
          echo "sdk.dir=${SDK_PATH}" > "$GITHUB_WORKSPACE/local.properties"
          echo "Wrote local.properties with sdk.dir=${SDK_PATH}"
          cat local.properties

      - name: Verify sdkmanager + platform-tools
        shell: bash
        run: |
          set -euxo pipefail
          "${ANDROID_HOME}/platform-tools/adb" version || true
          "${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager" --list | head -n 100 || true

      - name: Gradle help (sanity)
        run: ./gradlew -q help

      - name: Assemble Debug
        run: ./gradlew :app:assembleDebug --stacktrace --no-daemon --console=plain

      # Run pure JVM unit tests (no emulator). Adjust the task name if your module differs.
      - name: Unit tests
        run: ./gradlew :app:testDebugUnitTest --stacktrace --no-daemon --console=plain

      # Paparazzi record (Compose screenshots) if Paparazzi is present.
      - name: Paparazzi record
        run: ./gradlew recordPaparazziDebug --stacktrace --no-daemon --console=plain

      # Collect reports and Paparazzi images for inspection
      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            **/build/test-results/**
            **/build/reports/tests/**

      - name: Upload Paparazzi screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: paparazzi-snapshots
          path: |
            **/build/paparazzi/**

